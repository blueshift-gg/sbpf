use {
    crate::{
        elf_header::ELFHeader, errors::DisassemblerError, program_header::ProgramHeader,
        section_header::SectionHeader, section_header_entry::SectionHeaderEntry,
    },
    sbpf_common::platform::BpfPlatform,
    object::{Endianness, read::elf::ElfFile64},
    serde::{Deserialize, Serialize},
};

#[derive(Debug, Serialize, Deserialize)]
pub struct Program {
    pub elf_header: ELFHeader,
    pub program_headers: Vec<ProgramHeader>,
    pub section_headers: Vec<SectionHeader>,
    pub section_header_entries: Vec<SectionHeaderEntry>,
}

impl Program {
    pub fn from_bytes<Platform: BpfPlatform>(b: &[u8]) -> Result<Self, DisassemblerError> {
        let elf_file = ElfFile64::<Endianness>::parse(b)
            .map_err(|_| DisassemblerError::NonStandardElfHeader)?;

        // Parse elf header.
        let elf_header = ELFHeader::from_elf_file(&elf_file)?;

        // Parse program headers.
        let program_headers = ProgramHeader::from_elf_file(&elf_file)?;

        // Parse section headers and section header entries.
        let (section_headers, section_header_entries) = SectionHeader::from_elf_file::<Platform>(&elf_file)?;

        Ok(Self {
            elf_header,
            program_headers,
            section_headers,
            section_header_entries,
        })
    }
}

#[cfg(test)]
mod tests {
    use {crate::program::Program, hex_literal::hex};
    use sbpf_common::platform::SbpfV0;

    #[test]
    fn try_deserialize_program() {
        let program = Program::from_bytes::<SbpfV0>(&hexunwrap();
        println!("{:?}", program.section_header_entries);
    }
}
